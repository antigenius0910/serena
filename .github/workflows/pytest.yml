name: Tests on CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cpu:
    name: Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.17.0'
      # Add Go bin directory to PATH for this workflow
      # GITHUB_PATH is a special file that GitHub Actions uses to modify PATH
      # Writing to this file adds the directory to the PATH for subsequent steps
      - name: Install gopls
        shell: bash
        run: go install golang.org/x/tools/gopls@latest
      - name: Set up Elixir
        if: runner.os != 'Windows'
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.4'
          otp-version: '26.1'

      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: latest
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
      - name: Install terraform-ls
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            curl -LO "https://releases.hashicorp.com/terraform-ls/0.32.7/terraform-ls_0.32.7_linux_amd64.zip"
            unzip terraform-ls_0.32.7_linux_amd64.zip
            sudo mv terraform-ls /usr/local/bin/
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            curl -LO "https://releases.hashicorp.com/terraform-ls/0.32.7/terraform-ls_0.32.7_darwin_amd64.zip"
            unzip terraform-ls_0.32.7_darwin_amd64.zip
            sudo mv terraform-ls /usr/local/bin/
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            curl -LO "https://releases.hashicorp.com/terraform-ls/0.32.7/terraform-ls_0.32.7_windows_amd64.zip"
            unzip terraform-ls_0.32.7_windows_amd64.zip
            mkdir -p /tmp/terraform-ls
            mv terraform-ls.exe /tmp/terraform-ls/
            echo "/tmp/terraform-ls" >> $GITHUB_PATH
          fi
      - name: Debug PATH and installation (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "PATH: $PATH"
          echo "Checking for terraform..."
          which terraform || echo "terraform not found in PATH"
          echo "Checking for terraform.exe..."
          which terraform.exe || echo "terraform.exe not found in PATH"
          echo "Looking for terraform in common locations..."
          find /c -name "terraform.exe" 2>/dev/null || echo "terraform.exe not found anywhere"
          ls -la /c/hostedtoolcache/ || echo "hostedtoolcache not found"
      - name: Verify Terraform and terraform-ls installation
        shell: bash
        run: |
          terraform version
          terraform-ls version
      - name: Install uv
        shell: bash
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Cache uv virtualenv
        id: cache-uv
        uses: actions/cache@v3
        with:
          path: .venv
          key: uv-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
      - name: Create virtual environment
        shell: bash
        run: |
          if [ ! -d ".venv" ]; then
            uv venv
          fi
      - name: Install dependencies
        shell: bash
        run: uv pip install -e ".[dev]"
      - name: Test with pytest
        shell: bash
        run: uv run poe test
